### Get_Connected_Graphs

## Source Code

  import java.io.*;
  import java.util.*;

  public class Main {
      static class Edge {
          int src;
          int nbr;
          int wt;

          Edge(int src, int nbr, int wt) {
              this.src = src;
              this.nbr = nbr;
              this.wt = wt;
          }
      }

      public static void main(String[] args) throws Exception {
          BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

          int vtces = Integer.parseInt(br.readLine());
          ArrayList < Edge > [] graph = new ArrayList[vtces];
          for (int i = 0; i < vtces; i++) {
              graph[i] = new ArrayList < > ();
          }

          int edges = Integer.parseInt(br.readLine());
          for (int i = 0; i < edges; i++) {
              String[] parts = br.readLine().split(" ");
              int v1 = Integer.parseInt(parts[0]);
              int v2 = Integer.parseInt(parts[1]);
              int wt = Integer.parseInt(parts[2]);
              graph[v1].add(new Edge(v1, v2, wt));
              graph[v2].add(new Edge(v2, v1, wt));
          }

          ArrayList < ArrayList < Integer >> comps = new ArrayList < > ();

          // write your code here
          boolean visited[] = new boolean[vtces];
          for (int i = 0; i < vtces; i++) {
              if (visited[i] == false) {
                  ArrayList < Integer > sub_comps = new ArrayList < > ();
                  getComps(graph, visited, i, sub_comps);
                  comps.add(sub_comps);
              }
          }

          System.out.println(comps);
      }
      public static void getComps(ArrayList < Edge > [] graph, boolean[] visited, int src, ArrayList < Integer > sub_comps) {
          visited[src] = true;
          sub_comps.add(src);
          for (Edge edge: graph[src]) {
              if (!visited[edge.nbr]) {
                  sub_comps.add(edge.nbr);
                  getComps(graph, visited, edge.nbr, sub_comps);
              }
          }
      }
  }
